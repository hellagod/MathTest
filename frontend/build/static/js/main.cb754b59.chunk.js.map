{"version":3,"sources":["logo.svg","App.js","Urlstest.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","data","isLoading","xhr","XMLHttpRequest","open","send","this","setState","onreadystatechange","readyState","status","console","log","statusText","JSON","parse","response","map","item","key","name","className","renderProducts","React","Component","testurl","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Urlstest","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,yICuD5BC,G,8DAlDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,GACNC,WAAW,GAJA,E,gEAOE,IAAD,OACVC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,gDAAgD,GAChEF,EAAIG,OACJC,KAAKC,SAAS,CAAEN,WAAW,IAE3BC,EAAIM,mBAAqB,WACrB,GAAuB,IAAnBN,EAAIO,WACJ,OAAO,EAGQ,MAAfP,EAAIQ,OACJC,QAAQC,IAAIV,EAAIQ,OAAS,KAAOR,EAAIW,aAEpCF,QAAQC,IAAIV,GACZ,EAAKK,SAAS,CACVP,KAAMc,KAAKC,MAAMb,EAAIc,UACrBf,WAAW,Q,uCAKT,IAAD,EACeK,KAAKP,MAAzBC,EADK,EACLA,KACR,OAFa,EACCC,UAEH,sFAEAD,EAAKiB,KAAI,SAAAC,GACZ,OAAO,yBAAKC,IAAKD,GAAV,IAAmBA,EAAKE,W,+BAKvC,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,gBACVf,KAAKgB,uB,GA5CRC,IAAMC,Y,cCwCTC,EAnCD,WACV,OACI,kBAAC,IAAD,KACI,6BACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,QAAT,QAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAOZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,QACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,UAAZ,KAGA,kBAAC,IAAD,CAAOA,KAAK,KAAZ,SCxBAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.cb754b59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            isLoading: false,\n        }\n    }\n    componentDidMount() {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', 'http://localhost:8000/api/problem_prototypes', true);\n        xhr.send();\n        this.setState({ isLoading: true })\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState !== 4) {\n                return false\n            }\n\n            if (xhr.status !== 200) {\n                console.log(xhr.status + ': ' + xhr.statusText)\n            } else {\n                console.log(xhr);\n                this.setState({\n                    data: JSON.parse(xhr.response),\n                    isLoading: false,\n                })\n            }\n        }\n    }\n    renderProducts() {\n        const { data, isLoading } = this.state;\n        if (isLoading) {\n            return <div> Загрузка!!!!</div>\n        } else {\n            return data.map(item => {\n                return <div key={item} > {item.name}</div>\n            })\n        }\n    }\n    render() {\n        return (\n            <div className='App'>\n                <div className='product-list'>\n                    {this.renderProducts()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React from 'react';\r\nimport App from \"./App\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nlet testurl = () =>{\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/app\">App</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/users\">Users</Link>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n\r\n                {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n                <Switch>\r\n                    <Route path=\"/app\">\r\n                        <App />\r\n                    </Route>\r\n                    <Route path=\"/users\">\r\n                        2\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        3\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>);\r\n};\r\n\r\nexport default testurl;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Urlstest from './Urlstest';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Urlstest />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}